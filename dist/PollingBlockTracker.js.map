{"version":3,"file":"PollingBlockTracker.js","sourceRoot":"","sources":["../src/PollingBlockTracker.ts"],"names":[],"mappings":"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","sourcesContent":["import getCreateRandomId from 'json-rpc-random-id';\nimport pify from 'pify';\nimport { JsonRpcRequest } from 'json-rpc-engine';\nimport { BaseBlockTracker, Provider } from './BaseBlockTracker';\n\nconst createRandomId = getCreateRandomId();\nconst sec = 1000;\n\nexport interface PollingBlockTrackerOptions {\n  provider?: Provider;\n  pollingInterval?: number;\n  retryTimeout?: number;\n  keepEventLoopActive?: boolean;\n  setSkipCacheFlag?: boolean;\n  blockResetDuration?: number;\n}\n\ninterface ExtendedJsonRpcRequest<T> extends JsonRpcRequest<T> {\n  skipCache?: boolean;\n}\n\nexport class PollingBlockTracker extends BaseBlockTracker {\n  private _provider: Provider;\n\n  private _pollingInterval: number;\n\n  private _retryTimeout: number;\n\n  private _keepEventLoopActive: boolean;\n\n  private _setSkipCacheFlag: boolean;\n\n  constructor(opts: PollingBlockTrackerOptions = {}) {\n    // parse + validate args\n    if (!opts.provider) {\n      throw new Error('PollingBlockTracker - no provider specified.');\n    }\n\n    super({\n      blockResetDuration: opts.blockResetDuration ?? opts.pollingInterval,\n    });\n\n    // config\n    this._provider = opts.provider;\n    this._pollingInterval = opts.pollingInterval || 20 * sec;\n    this._retryTimeout = opts.retryTimeout || this._pollingInterval / 10;\n    this._keepEventLoopActive =\n      opts.keepEventLoopActive === undefined ? true : opts.keepEventLoopActive;\n    this._setSkipCacheFlag = opts.setSkipCacheFlag || false;\n  }\n\n  // trigger block polling\n  async checkForLatestBlock() {\n    await this._updateLatestBlock();\n    return await this.getLatestBlock();\n  }\n\n  protected async _start(): Promise<void> {\n    this._synchronize();\n  }\n\n  protected async _end(): Promise<void> {\n    // No-op\n  }\n\n  private async _synchronize(): Promise<void> {\n    while (this._isRunning) {\n      try {\n        await this._updateLatestBlock();\n        const promise = timeout(\n          this._pollingInterval,\n          !this._keepEventLoopActive,\n        );\n        this.emit('_waitingForNextIteration');\n        await promise;\n      } catch (err: any) {\n        const newErr = new Error(\n          `PollingBlockTracker - encountered an error while attempting to update latest block:\\n${\n            err.stack ?? err\n          }`,\n        );\n        try {\n          this.emit('error', newErr);\n        } catch (emitErr) {\n          console.error(newErr);\n        }\n        const promise = timeout(this._retryTimeout, !this._keepEventLoopActive);\n        this.emit('_waitingForNextIteration');\n        await promise;\n      }\n    }\n  }\n\n  private async _updateLatestBlock(): Promise<void> {\n    // fetch + set latest block\n    const latestBlock = await this._fetchLatestBlock();\n    this._newPotentialLatest(latestBlock);\n  }\n\n  private async _fetchLatestBlock(): Promise<string> {\n    const req: ExtendedJsonRpcRequest<[]> = {\n      jsonrpc: '2.0',\n      id: createRandomId(),\n      method: 'eth_blockNumber',\n      params: [],\n    };\n    if (this._setSkipCacheFlag) {\n      req.skipCache = true;\n    }\n\n    const res = await pify((cb) => this._provider.sendAsync(req, cb))();\n    if (res.error) {\n      throw new Error(\n        `PollingBlockTracker - encountered error fetching block:\\n${res.error.message}`,\n      );\n    }\n    return res.result;\n  }\n}\n\n/**\n * Waits for the specified amount of time.\n *\n * @param duration - The amount of time in milliseconds.\n * @param unref - Assuming this function is run in a Node context, governs\n * whether Node should wait before the `setTimeout` has completed before ending\n * the process (true for no, false for yes). Defaults to false.\n * @returns A promise that can be used to wait.\n */\nfunction timeout(duration: number, unref: boolean) {\n  return new Promise((resolve) => {\n    const timeoutRef = setTimeout(resolve, duration);\n    // don't keep process open\n    if (timeoutRef.unref && unref) {\n      timeoutRef.unref();\n    }\n  });\n}\n"]}